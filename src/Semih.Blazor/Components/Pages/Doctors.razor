@page "/doctors"
@using Semih.Doctors
@using Semih.Permissions
@using Volo.Abp.Application.Dtos
@using Microsoft.AspNetCore.Components.Forms
@using Blazorise
@using Microsoft.AspNetCore.Components
@using Volo.Abp.Authorization
@using Microsoft.AspNetCore.Authorization
@inject IDoctorAppService DoctorAppService
@inject IAuthorizationService AuthorizationService

@attribute [Authorize(SemihPermissions.Doctors.Default)]
@attribute [Authorize(SemihPermissions.Doctors.Default)]

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>Doctors</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="OpenCreateModal">New Doctor</Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="DoctorDto"
                  Data="@DoctorList"
                  PageSize="10"
                  ShowPager="true"
                  Striped="true">
            <DataGridColumn TItem="DoctorDto" Field="@nameof(DoctorDto.FirstName)" Caption="First Name"/>
            <DataGridColumn TItem="DoctorDto" Field="@nameof(DoctorDto.LastName)" Caption="Last Name"/>
            <DataGridColumn TItem="DoctorDto" Field="@nameof(DoctorDto.Specialty)" Caption="Specialty"/>
            <DataGridColumn TItem="DoctorDto" Caption="Actions">
                <DisplayTemplate>
                    <Button Color="Color.Primary" Size="Size.Small" Clicked="() => OpenEditModal(context)">Edit</Button>
                </DisplayTemplate>
            </DataGridColumn>
        </DataGrid>
    </CardBody>
</Card>

<Modal @bind-Visible="@IsModalVisible">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@(EditingDoctorId == Guid.Empty ? "New Doctor" : "Edit Doctor")</ModalTitle>
            <CloseButton Clicked="CloseCreateOrEditModal"/>
        </ModalHeader>
        <ModalBody>
            <EditForm Model="@EditingDoctor" OnValidSubmit="SaveDoctorAsync">
                <DataAnnotationsValidator />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">First Name</label>
                    <InputText @bind-Value="EditingDoctor.FirstName" class="form-control" />
                    <ValidationMessage For="@(() => EditingDoctor.FirstName)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Last Name</label>
                    <InputText @bind-Value="EditingDoctor.LastName" class="form-control" />
                    <ValidationMessage For="@(() => EditingDoctor.LastName)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Specialty</label>
                    <InputText @bind-Value="EditingDoctor.Specialty" class="form-control" />
                    <ValidationMessage For="@(() => EditingDoctor.Specialty)" />
                </div>

                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="CloseCreateOrEditModal">Cancel</Button>
                    <Button Color="Color.Primary" Type="ButtonType.Submit">Save</Button>
                </ModalFooter>
            </EditForm>
        </ModalBody>
    </ModalContent>
</Modal>


@code {
    private IReadOnlyList<DoctorDto> DoctorList { get; set; } = new List<DoctorDto>();
    private bool IsModalVisible;
    private Guid EditingDoctorId;
    private CreateUpdateDoctorDto EditingDoctor = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDoctorsAsync();
    }

    private async Task LoadDoctorsAsync()
    {
        try 
        {
            var result = await DoctorAppService.GetListAsync(new PagedAndSortedResultRequestDto());
            DoctorList = result.Items;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading doctors: {ex.Message}");
            DoctorList = new List<DoctorDto>();
        }
    }

    private Task OpenCreateModal()
    {
        EditingDoctorId = Guid.Empty;
        EditingDoctor = new CreateUpdateDoctorDto();
        IsModalVisible = true;
        return Task.CompletedTask;
    }

    private Task OpenEditModal(DoctorDto doctor)
    {
        EditingDoctorId = doctor.Id;
        EditingDoctor = new CreateUpdateDoctorDto
        {
            FirstName = doctor.FirstName,
            LastName = doctor.LastName,
            Specialty = doctor.Specialty
        };
        IsModalVisible = true;
        return Task.CompletedTask;
    }

    private async Task SaveDoctorAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(EditingDoctor.FirstName) || 
                string.IsNullOrWhiteSpace(EditingDoctor.LastName) || 
                string.IsNullOrWhiteSpace(EditingDoctor.Specialty))
            {
                // Form validasyonu başarısız
                return;
            }

            if (EditingDoctorId == Guid.Empty)
            {
                var result = await DoctorAppService.CreateAsync(EditingDoctor);
                if (result != null)
                {
                    await LoadDoctorsAsync();
                    IsModalVisible = false;
                }
            }
            else
            {
                await DoctorAppService.UpdateAsync(EditingDoctorId, EditingDoctor);
                await LoadDoctorsAsync();
                IsModalVisible = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving doctor: {ex.Message}");
            // Burada bir hata mesajı gösterebilirsiniz
        }
    }

    private Task CloseCreateOrEditModal()
    {
        IsModalVisible = false;
        return Task.CompletedTask;
    }
}